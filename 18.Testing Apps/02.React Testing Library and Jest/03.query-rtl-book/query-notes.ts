[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"# Query  Functions\nAll query functions are accessed through the `screen` object in a test.  These query functions *always* begin with one of the following names: `getBy`, `getAllBy`, `queryBy`, `queryAllBy`, `findBy`, `findAllBy`. \n\n| Start of Function Name | Examples                             \n|------------------------|--------------------------------------|\n| getBy                  | getByRole, getByText                 \n| getAllBy               | getAllByText, getByDisplayValue      |\n| queryBy                | queryByDisplayValue, queryByTitle    |\n| queryAllBy             | queryAllByTitle, queryAllByText      |\n| findBy                 | findByRole, findBytext               |\n| findAllBy              | findAllByText, findAllByDisplayValue |\n\nThese names indicate the following:\n\n1. Whether the function will return an element or an array of elements\n2. What happens if the function finds 0, 1, or > 1 of the targeted element\n3. Whether the function runs instantly (synchronously) or looks for an element over a span of time (asynchronously)\n\n\n### Looking for a Single Element?\n\n| Name    | 0 matches | 1 match | > 1 match | Notes                                          |\n|---------|-----------|---------|-----------|------------------------------------------------|\n| getBy   | Throw     | Element | Throw     |                                                |\n| queryBy | null      | Element | Throw     |                                                |\n| findBy  | Throw     | Element | Throw     | Looks for an element over the span of 1 second |\n\n### Looking for Multiple Elements?\n\n| Name       | 0 matches | 1 match   | > 1 match | Notes                                        |\n|------------|-----------|-----------|-----------|----------------------------------------------|\n| getAllBy   | Throw     | []Element | []Element |                                              |\n| queryAllBy | [ ]       | []Element | []Element |                                              |\n| findAllBy  | Throw     | []Element | []Element | Looks for elements over the span of 1 second |\n\n### When to use each\n\n| Goal of test                           | Use                 |\n|----------------------------------------|---------------------|\n| Prove an element exists                | getBy, getAllBy     |\n| Prove an element does **not** exist        | queryBy, queryAllBy |\n| Make sure an element eventually exists | findBy, findAllBy   |\n\n","type":"text","id":"f6jn9"},{"content":"import {render, screen} from \"@testing-library/react\";\r\nfunction ColorList(){\r\n  return (\r\n    <ul>\r\n      <li>Red</li>\r\n      <li>Green</li>\r\n      <li>Blue</li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nrender(<ColorList/>)","type":"code","id":"fn8jw"},{"content":"test(\"getBy, queryBy, findBy, finding 0 elements\", async() => {\r\n  render(<ColorList/>);\r\n\r\n  expect(\r\n    () => screen.getByRole(\"textbox\") // Throw a Error\r\n  ).toThrow()\r\n  \r\n  expect(screen.queryByRole(\"textbox\")).toEqual(null)\r\n  \r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole(\"textbox\");\r\n  }catch(err){\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true)\r\n})","type":"code","id":"pfiak"},{"content":"test(\"getBy, queryBy, findBy, finding 1 elements\", async() => {\r\n  render(<ColorList/>);\r\n  expect(screen.getByRole('list')).toBeInTheDocument() \r\n  expect(screen.queryByRole(\"list\")).toBeInTheDocument()\r\n  expect( await screen.findByRole(\"list\")).toBeInTheDocument()\r\n  }\r\n)","type":"code","id":"5u03h"},{"content":"test(\"getBy, queryBy, findBy, finding more than 1 element\", async() => {\r\n  render(<ColorList/>)\r\n\r\n  expect(() => screen.getByRole(\"listitem\")).toThrow()\r\n\r\n  expect( () => screen.queryByRole(\"listitem\")).toThrow()\r\n\r\n  let throwError = false;\r\n  try{\r\n    await screen.findByRole(\"listitem\")\r\n  }catch(err){\r\n    throwError=true\r\n  }\r\n  expect(throwError).toEqual(true)\r\n  \r\n})","type":"code","id":"u5xv7"},{"content":"test(\"getAllBy, queryAllBy, findAllBy\", async() =>{\r\n  render(<ColorList/>)\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3)\r\n   expect(screen.queryAllByRole('listitem')).toHaveLength(3)\r\n  expect( await screen.findAllByRole('listitem')).toHaveLength(3)\r\n})","type":"code","id":"ukhfo"},{"content":"test(\"favor using getBy to prove an element exists\", () => {\r\n  render(<ColorList/>)\r\n  const element = screen.getByRole(\"list\")\r\n  expect(element).toBeInTheDocument()\r\n})","type":"code","id":"3tigb"},{"content":"test(\"favor using queryBy when proving an element does not exists\", () => {\r\n  render( <ColorList />)\r\n  const element = screen.queryByRole(\"textbox\")\r\n  expect(element).not.toBeInTheDocument()\r\n})","type":"code","id":"5hlvo"},{"content":"import {useState, useEffect} from \"react\";\r\n\r\nfunction fakeFetchColors(){\r\n  return Promise.resolve(\r\n    [\"red\", \"green\", \"blue\"]\r\n  )\r\n}\r\n\r\nfunction LoadableColorList(){\r\n  const [colors, setColors] = useState([])\r\n\r\n  useEffect(()=>{\r\n    fakeFetchColors()\r\n    .then(c => setColors(c))\r\n  }, []);\r\n\r\n  const renderedColors = colors.map(color => <li key={color}>{color}</li>)\r\n\r\n  return <ul>{renderedColors}</ul>\r\n}\r\n\r\nrender(<LoadableColorList />)","type":"code","id":"5hrkh"},{"content":"test(\"favor findBy or findAllBy when data fetching\", async() =>{\r\n  render(<LoadableColorList/>)\r\n  const elements = await screen.findAllByRole(\"listitem\");\r\n  expect(elements).toHaveLength(3)\r\n})","type":"code","id":"4emop"}]