[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"# Matchers\n\nMatchers help make sure that a value is what we expect it to be.  \n\nA project generated by Create React App has access to all the matchers included in Jest, as well as matchers defined in the @testing-library/jest-dom package.\n\n| Name                      | Link                                                                                       |\n|---------------------------|--------------------------------------------------------------------------------------------|\n| Jest                      | https://jestjs.io/docs/mock-function-api\n| @testing-library/jest-dom | https://github.com/testing-library/jest-dom |\n\n\n","type":"text","id":"x1gjv"},{"content":"import { screen, render, within } from '@testing-library/react';\n\nfunction FormData() {\n  return (\n    <div>\n      <button>Go Back</button>\n      <form aria-label=\"form\">\n        <button>Save</button>\n        <button>Cancel</button>\n      </form>\n    </div>\n  );\n}\nrender(<FormData />);","type":"code","id":"0j6z9"},{"content":"function toContainRole(containerElement, role, quantity = 1) {\n  const elements = within(containerElement).queryAllByRole(role);\n  if (elements.length === quantity) {\n    return { pass: true };\n  }\n  return {\n    pass: false,\n    message: () => `Expected to find ${quantity} ${role} element/s. Found ${elements.length} ${role} element/s instead.`,\n  };\n}\n\nexpect.extend({ toContainRole });","type":"code","id":"suaw9"},{"content":"// test('the form displays two buttons', () => {\n//   render(<FormData />);\n\n//   const form = screen.getByRole(\"form\")\n//   const buttons = within(form).getAllByRole('button');\n\n//   expect(buttons).toHaveLength(2);\n// });\n\ntest('the form displays two buttons using custom matcher', () => {\n  render(<FormData />);\n  const form = screen.getByRole(\"form\")\n  expect(form).toContainRole('button', 2)\n});","type":"code","id":"gfgqo"}]